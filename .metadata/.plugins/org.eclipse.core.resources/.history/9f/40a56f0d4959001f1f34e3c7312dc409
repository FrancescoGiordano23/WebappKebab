package com.advancia.Rest;

import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import com.advancia.Modal.Container;
import com.advancia.Utility.ContainerServices;

@Path("/containers")
public class ContainerRest {

	@GET
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	public Response getAllContainers() {
		if (ContainerServices.getAllContainers() != null)
			return Response.ok(ContainerServices.getAllContainers()).build();
		else
			return Response.noContent().build();
	}

	@GET
	@Path("/{id}")
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	public Response getContainerById(@PathParam("id") int selectedSecondaryId) {
		if (ContainerServices.getContainerById(selectedSecondaryId) != null)
			return Response.ok(ContainerServices.getContainerById(selectedSecondaryId)).build();
		else
			return Response.noContent().build();

	}

	@DELETE
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	public Response deleteAllContainer() {
		if(ContainerServices.deleteAllContainer()==true)
			return Response.ok().build();
		else
			return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
	}

	@DELETE
	@Path("/{id}")
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	public Response deleteContainerById(@PathParam("id") int selectedSecondaryId) {
		if(ContainerServices.deleteContainerById(selectedSecondaryId)==true)
			return Response.ok().build();
		else
			return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
	}

	@PUT
	@Path("/{id}/{name}/{price}")
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	public Response updateContainerById(@PathParam("id") int selectedSecondaryId, @PathParam("name") String newName,
			@PathParam("price") int newPrice) {
		if(ContainerServices.updateContainerById(selectedSecondaryId, newName, newPrice)==true)
			return Response.ok().build();
		else
			return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
	}

	@POST
	@Path("/{name}/{price}")
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	public void createContainer(@PathParam("name") String name, @PathParam("price") int price) {
		ContainerServices.createContainer(name, price);
	}

}
