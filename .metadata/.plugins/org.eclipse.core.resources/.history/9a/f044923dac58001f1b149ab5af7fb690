package com.advancia.Utility;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityTransaction;
import javax.websocket.server.PathParam;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import com.advancia.DAO.PrimaryIngredientDAO;
import com.advancia.Modal.Kebab;
import com.advancia.Modal.PrimaryIngredient;

@Path("/primaryIngredients")
public class PrimaryIngredientServices {

	@GET
	@Path("/getAll")
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	public static List<PrimaryIngredient> getAllPrimaryIngredients() {
		EntityManager manager = null;
		EntityTransaction transaction = null;
		try {
			manager = JpaUtil.GetEntityManager();
			transaction = JpaUtil.GetEntityTransaction(manager);
			transaction.begin();
			return PrimaryIngredientDAO.getAllPrimaryIngredients(manager);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (transaction != null)
				transaction.commit();
			if (manager != null)
				manager.close();
		}
		return null;
	}

	@GET
	@Path("/get{id}")
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	public static PrimaryIngredient getPrimaryIngredientById(@PathParam("id") int selectedPrimaryId) {
		EntityManager manager = null;
		EntityTransaction transaction = null;
		try {
			manager = JpaUtil.GetEntityManager();
			transaction = JpaUtil.GetEntityTransaction(manager);
			transaction.begin();
			return PrimaryIngredientDAO.getPrimaryIngredientById(manager, selectedPrimaryId);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (transaction != null)
				transaction.commit();
			if (manager != null)
				manager.close();
		}
		return null;
	}

	@DELETE
	@Path("/Delete{id}")
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	public static void deletePrimaryIngredientById(@PathParam("id") int selectedPrimaryId) {
		EntityManager manager = null;
		EntityTransaction transaction = null;
		try {
			manager = JpaUtil.GetEntityManager();
			transaction = JpaUtil.GetEntityTransaction(manager);
			transaction.begin();
			PrimaryIngredientDAO.deletePrimaryIngredientById(manager, selectedPrimaryId);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (transaction != null)
				transaction.commit();
			if (manager != null)
				manager.close();
		}
	}

	@PUT
	@Path("/update{id}{name}{price}")
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	public static void updatePrimaryIngredientById(@PathParam("id") int selectedPrimaryId,
			@PathParam("name") String newName, @PathParam("price") int newPrice) {
		{
			EntityManager manager = null;
			EntityTransaction transaction = null;
			try {
				manager = JpaUtil.GetEntityManager();
				transaction = JpaUtil.GetEntityTransaction(manager);
				transaction.begin();
				PrimaryIngredient primaryIngredientToUpdate = PrimaryIngredientDAO.getPrimaryIngredientById(manager,
						selectedPrimaryId);
				if (primaryIngredientToUpdate != null) {
					primaryIngredientToUpdate.setName(newName);
					primaryIngredientToUpdate.setPrice(newPrice);
				}

			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				if (transaction != null)
					transaction.commit();
				if (manager != null)
					manager.close();
			}

		}
	}

	@POST
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	public static void createPrimaryIngredient(String name, int price) {
		EntityManager manager = null;
		EntityTransaction transaction = null;
		try {
			manager = JpaUtil.GetEntityManager();
			transaction = JpaUtil.GetEntityTransaction(manager);
			transaction.begin();
			PrimaryIngredient newPrimaryIngredient = new PrimaryIngredient();
			newPrimaryIngredient.setName(name);
			newPrimaryIngredient.setPrice(price);
			PrimaryIngredientDAO.createNewPrimaryIngredient(manager, newPrimaryIngredient);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (transaction != null)
				transaction.commit();
			if (manager != null)
				manager.close();

		}

	}

}
