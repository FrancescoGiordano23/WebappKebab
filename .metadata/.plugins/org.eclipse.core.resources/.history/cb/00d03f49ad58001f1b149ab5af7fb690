package com.advancia.Utility;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityTransaction;
import javax.websocket.server.PathParam;
import javax.ws.rs.DELETE;
import javax.GET;
import javax.POST;
import javax.PUT;
import javax.Path;
import javax.Produces;
import javax.ws.rs.core.MediaType;
import com.advancia.DAO.PrimaryIngredientDAO;
import com.advancia.Modal.PrimaryIngredient;

@Path("/primaryIngredients")
public class PrimaryIngredientServices {

    @GET
    @Path("/getAll")
    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
    public List<PrimaryIngredient> getAllPrimaryIngredients() {
        EntityManager manager = null;
        EntityTransaction transaction = null;
        try {
            manager = JpaUtil.GetEntityManager();
            return PrimaryIngredientDAO.getAllPrimaryIngredients(manager);
        } finally {
            if (manager != null)
                manager.close();
        }
    }

    @GET
    @Path("/get/{id}")
    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
    public PrimaryIngredient getPrimaryIngredientById(@PathParam("id") int selectedPrimaryId) {
        EntityManager manager = null;
        try {
            manager = JpaUtil.GetEntityManager();
            return PrimaryIngredientDAO.getPrimaryIngredientById(manager, selectedPrimaryId);
        } finally {
            if (manager != null)
                manager.close();
        }
    }

    @DELETE
    @Path("/delete/{id}")
    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
    public void deletePrimaryIngredientById(@PathParam("id") int selectedPrimaryId) {
        EntityManager manager = null;
        EntityTransaction transaction = null;
        try {
            manager = JpaUtil.GetEntityManager();
            transaction = manager.getTransaction();
            transaction.begin();
            PrimaryIngredientDAO.deletePrimaryIngredientById(manager, selectedPrimaryId);
            transaction.commit();
        } catch (Exception e) {
            if (transaction != null && transaction.isActive()) {
                transaction.rollback();
            }
            e.printStackTrace();
        } finally {
            if (manager != null)
                manager.close();
        }
    }

    @PUT
    @Path("/update/{id}/{name}/{price}")
    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
    public void updatePrimaryIngredientById(@PathParam("id") int selectedPrimaryId,
                                            @PathParam("name") String newName, 
                                            @PathParam("price") int newPrice) {
        EntityManager manager = null;
        EntityTransaction transaction = null;
        try {
            manager = JpaUtil.GetEntityManager();
            transaction = manager.getTransaction();
            transaction.begin();
            PrimaryIngredient primaryIngredientToUpdate = PrimaryIngredientDAO.getPrimaryIngredientById(manager, selectedPrimaryId);
            if (primaryIngredientToUpdate != null) {
                primaryIngredientToUpdate.setName(newName);
                primaryIngredientToUpdate.setPrice(newPrice);
                transaction.commit();
            } else {
                transaction.rollback();
            }
        } catch (Exception e) {
            if (transaction != null && transaction.isActive()) {
                transaction.rollback();
            }
            e.printStackTrace();
        } finally {
            if (manager != null)
                manager.close();
        }
    }

    @POST
    @Path("/create/{name}/{price}")
    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
    public void createPrimaryIngredient(@PathParam("name") String name, @PathParam("price") int price) {
        EntityManager manager = null;
        EntityTransaction transaction = null;
        try {
            manager = JpaUtil.GetEntityManager();
            transaction = manager.getTransaction();
            transaction.begin();
            PrimaryIngredient newPrimaryIngredient = new PrimaryIngredient();
            newPrimaryIngredient.setName(name);
            newPrimaryIngredient.setPrice(price);
            PrimaryIngredientDAO.createNewPrimaryIngredient(manager, newPrimaryIngredient);
            transaction.commit();
        } catch (Exception e) {
            if (transaction != null && transaction.isActive()) {
                transaction.rollback();
            }
            e.printStackTrace();
        } finally {
            if (manager != null)
                manager.close();
        }
    }
}
