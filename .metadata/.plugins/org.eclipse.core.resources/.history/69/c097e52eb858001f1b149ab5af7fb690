package com.advancia.Utility;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityTransaction;

import com.advancia.DAO.ContainerDAO;
import com.advancia.DAO.ContainerDAO;
import com.advancia.Modal.Container;
import com.advancia.Modal.Container;

public class ContainerServices {

	public static List<Container> getAllContainers() {
		EntityManager manager = null;
		EntityTransaction transaction = null;
		try {
			manager = JpaUtil.GetEntityManager();
			transaction = JpaUtil.GetEntityTransaction(manager);
			transaction.begin();
			return ContainerDAO.getAllContainers(manager);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (transaction != null)
				transaction.commit();
			if (manager != null)
				manager.close();
		}
		return null;
	}

	public static Container getContainerById(int selectedContainerId) {
		EntityManager manager = null;
		EntityTransaction transaction = null;
		try {
			manager = JpaUtil.GetEntityManager();
			transaction = JpaUtil.GetEntityTransaction(manager);
			transaction.begin();
			return ContainerDAO.getContainerById(manager, selectedContainerId);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (transaction != null)
				transaction.commit();
			if (manager != null)
				manager.close();
		}
		return null;
	}

	public static void deleteAllContainer() {
		EntityManager manager = null;
		EntityTransaction transaction = null;
		try {
			manager = JpaUtil.GetEntityManager();
			transaction = JpaUtil.GetEntityTransaction(manager);
			transaction.begin();

			ContainerDAO.deleteAllContainers(manager);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (transaction != null)
				transaction.commit();
			if (manager != null)
				manager.close();
		}
	}

	public static void deleteContainerById(int selectedSecondaryId) {
		EntityManager manager = null;
		EntityTransaction transaction = null;
		try {
			manager = JpaUtil.GetEntityManager();
			transaction = manager.getTransaction();
			transaction.begin();
			ContainerDAO.deleteContainerById(manager, selectedSecondaryId);
			transaction.commit();
		} catch (Exception e) {
			if (transaction != null && transaction.isActive()) {
				transaction.rollback();
			}
			e.printStackTrace();
		} finally {
			if (manager != null)
				manager.close();
		}
	}

	public static void updateContainerById(int selectedSecondaryId, String newName, int newPrice) {
		EntityManager manager = null;
		EntityTransaction transaction = null;
		try {
			manager = JpaUtil.GetEntityManager();
			transaction = manager.getTransaction();
			transaction.begin();
			Container ContainerToUpdate = ContainerDAO.getContainerById(manager,
					selectedSecondaryId);
			if (ContainerToUpdate != null) {
				ContainerToUpdate.setName(newName);
				ContainerToUpdate.setPrice(newPrice);
				transaction.commit();
			} else {
				transaction.rollback();
			}
		} catch (Exception e) {
			if (transaction != null && transaction.isActive()) {
				transaction.rollback();
			}
			e.printStackTrace();
		} finally {
			if (manager != null)
				manager.close();
		}
	}

	public static void createContainer(String name, int price) {
		EntityManager manager = null;
		EntityTransaction transaction = null;
		try {
			manager = JpaUtil.GetEntityManager();
			transaction = manager.getTransaction();
			transaction.begin();
			Container newContainer = new Container();
			newContainer.setName(name);
			newContainer.setPrice(price);
			ContainerDAO.createNewContainer(manager, newContainer);
			transaction.commit();
		} catch (Exception e) {
			if (transaction != null && transaction.isActive()) {
				transaction.rollback();
			}
			e.printStackTrace();
		} finally {
			if (manager != null)
				manager.close();
		}
	}
}
